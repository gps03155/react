{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/toggle';\nconst REMOVE = 'todos/REMOVE'; // export const changeInput = input => ({type: CHANGE_INPUT, input});\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 3; // export const insert = text => ({type: INSERT, todo: {id: id++, text, done: false}});\n\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  done: false\n})); // export const toggle = id => ({type: TOGGLE, id});\n// export const remove = id => ({type: REMOVE, id});\n\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트오ㅘ 리덕스 사용하기',\n    done: false\n  }]\n}; // function todos(state=initialState, action) {\n//     switch (action.type) {\n//         case CHANGE_INPUT:\n//             return {...state, input: action.input}\n//         case INSERT:\n//             return {...state, todos: state.todos.concat(action.todo)}\n//         case TOGGLE:\n//             return {...state, todos: state.todos.map(todo => todo.id === action.id? {...todo, done: !todo.done} : todo)}\n//         case REMOVE:\n//             return {...state, todos: state.todos.filter(todo => todo.id !== action.id)}\n//         default:\n//             return state;\n//     }\n// }\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => ({ ...state,\n    todos: state.todos.concat(todo)\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => ({ ...state,\n    todos: state.todos.map(todo => todo.id === id ? { ...todo,\n      done: !todo.done\n    } : todo)\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => ({ ...state,\n    todos: state.todos.filter(todo => todo.id !== id)\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","produce","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","id","insert","text","done","toggle","remove","initialState","todos","state","payload","draft","todo","concat","map","filter"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAGP,YAAY,CAACG,YAAD,EAAeK,KAAK,IAAIA,KAAxB,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT,C,CACA;;AACA,OAAO,MAAMC,MAAM,GAAGV,YAAY,CAACI,MAAD,EAASO,IAAI,KAAK;AAACF,EAAAA,EAAE,EAAEA,EAAE,EAAP;AAAWE,EAAAA,IAAX;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAAL,CAAb,CAA3B,C,CAEP;AACA;;AACA,OAAO,MAAMC,MAAM,GAAGb,YAAY,CAACK,MAAD,EAASI,EAAE,IAAIA,EAAf,CAA3B;AACP,OAAO,MAAMK,MAAM,GAAGd,YAAY,CAACM,MAAD,EAASG,EAAE,IAAIA,EAAf,CAA3B;AAEP,MAAMM,YAAY,GAAG;AACjBP,EAAAA,KAAK,EAAE,EADU;AAEjBQ,EAAAA,KAAK,EAAE,CACH;AAACP,IAAAA,EAAE,EAAE,CAAL;AAAQE,IAAAA,IAAI,EAAE,YAAd;AAA4BC,IAAAA,IAAI,EAAE;AAAlC,GADG,EAEH;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQE,IAAAA,IAAI,EAAE,gBAAd;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GAFG;AAFU,CAArB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,KAAK,GAAGf,aAAa,CAAC;AACxB,GAACE,YAAD,GAAgB,CAACc,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEV;AAAV,GAAR,KAA6BN,OAAO,CAACe,KAAD,EAAQE,KAAK,IAAI;AAACA,IAAAA,KAAK,CAACX,KAAN,GAAcA,KAAd;AAAoB,GAAtC,CAD5B;AAExB,GAACJ,MAAD,GAAU,CAACa,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEE;AAAV,GAAR,MAA6B,EAAC,GAAGH,KAAJ;AAAWD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,MAAZ,CAAmBD,IAAnB;AAAlB,GAA7B,CAFc;AAGxB,GAACf,MAAD,GAAU,CAACY,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAET;AAAV,GAAR,MAA2B,EAAC,GAAGQ,KAAJ;AAAWD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYM,GAAZ,CAAgBF,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAAZ,GAAgB,EAAC,GAAGW,IAAJ;AAAUR,MAAAA,IAAI,EAAE,CAACQ,IAAI,CAACR;AAAtB,KAAhB,GAA8CQ,IAAtE;AAAlB,GAA3B,CAHc;AAIxB,GAACd,MAAD,GAAU,CAACW,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAET;AAAV,GAAR,MAA2B,EAAC,GAAGQ,KAAJ;AAAWD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYO,MAAZ,CAAmBH,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAAvC;AAAlB,GAA3B;AAJc,CAAD,EAKxBM,YALwB,CAA3B;AAOA,eAAeC,KAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport produce from 'immer';\n\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/toggle';\nconst REMOVE = 'todos/REMOVE';\n\n// export const changeInput = input => ({type: CHANGE_INPUT, input});\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\n\nlet id = 3;\n// export const insert = text => ({type: INSERT, todo: {id: id++, text, done: false}});\nexport const insert = createAction(INSERT, text => ({id: id++, text, done: false}));\n\n// export const toggle = id => ({type: TOGGLE, id});\n// export const remove = id => ({type: REMOVE, id});\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\n\nconst initialState = {\n    input: '',\n    todos: [\n        {id: 1, text: '리덕스 기초 배우기', done: true},\n        {id: 2, text: '리액트오ㅘ 리덕스 사용하기', done: false}\n    ]\n}\n\n// function todos(state=initialState, action) {\n//     switch (action.type) {\n//         case CHANGE_INPUT:\n//             return {...state, input: action.input}\n//         case INSERT:\n//             return {...state, todos: state.todos.concat(action.todo)}\n//         case TOGGLE:\n//             return {...state, todos: state.todos.map(todo => todo.id === action.id? {...todo, done: !todo.done} : todo)}\n//         case REMOVE:\n//             return {...state, todos: state.todos.filter(todo => todo.id !== action.id)}\n//         default:\n//             return state;\n//     }\n// }\nconst todos = handleActions({\n    [CHANGE_INPUT]: (state, {payload: input}) => produce(state, draft => {draft.input = input}),\n    [INSERT]: (state, {payload: todo}) => ({...state, todos: state.todos.concat(todo)}),\n    [TOGGLE]: (state, {payload: id}) => ({...state, todos: state.todos.map(todo => todo.id === id? {...todo, done: !todo.done} : todo)}),\n    [REMOVE]: (state, {payload: id}) => ({...state, todos: state.todos.filter(todo => todo.id !== id)})\n}, initialState)\n\nexport default todos;"]},"metadata":{},"sourceType":"module"}