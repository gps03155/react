{"ast":null,"code":"const CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/toggle';\nconst REMOVE = 'todos/REMOVE';\nexport const changeInput = input => ({\n  type: CHANGE_INPUT,\n  input\n});\nlet id = 3;\nexport const insert = text => ({\n  type: INSERT,\n  todo: {\n    id: id++,\n    text,\n    done: false\n  }\n});\nexport const toggle = id => ({\n  type: TOGGLE,\n  id\n});\nexport const remove = id => ({\n  type: REMOVE,\n  id\n});\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트오ㅘ 리덕스 사용하기',\n    done: false\n  }]\n};\n\nfunction todos(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return { ...state,\n        input: action.input\n      };\n\n    case INSERT:\n      return { ...state,\n        todos: state.todos.concat(action.todo)\n      };\n\n    case TOGGLE:\n      return { ...state,\n        todos: state.todos.map(todo => todo.id === action.id ? { ...todo,\n          done: !todo.done\n        } : todo)\n      };\n\n    case REMOVE:\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default todos;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/react-redux-tutorial/src/modules/todos.js"],"names":["CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","type","id","insert","text","todo","done","toggle","remove","initialState","todos","state","action","concat","map","filter"],"mappings":"AAAA,MAAMA,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AAEA,OAAO,MAAMC,WAAW,GAAGC,KAAK,KAAK;AAACC,EAAAA,IAAI,EAAEN,YAAP;AAAqBK,EAAAA;AAArB,CAAL,CAAzB;AAEP,IAAIE,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,KAAK;AAACH,EAAAA,IAAI,EAAEL,MAAP;AAAeS,EAAAA,IAAI,EAAE;AAACH,IAAAA,EAAE,EAAEA,EAAE,EAAP;AAAWE,IAAAA,IAAX;AAAiBE,IAAAA,IAAI,EAAE;AAAvB;AAArB,CAAL,CAAnB;AAEP,OAAO,MAAMC,MAAM,GAAGL,EAAE,KAAK;AAACD,EAAAA,IAAI,EAAEJ,MAAP;AAAeK,EAAAA;AAAf,CAAL,CAAjB;AACP,OAAO,MAAMM,MAAM,GAAGN,EAAE,KAAK;AAACD,EAAAA,IAAI,EAAEH,MAAP;AAAeI,EAAAA;AAAf,CAAL,CAAjB;AAEP,MAAMO,YAAY,GAAG;AACjBT,EAAAA,KAAK,EAAE,EADU;AAEjBU,EAAAA,KAAK,EAAE,CACH;AAACR,IAAAA,EAAE,EAAE,CAAL;AAAQE,IAAAA,IAAI,EAAE,YAAd;AAA4BE,IAAAA,IAAI,EAAE;AAAlC,GADG,EAEH;AAACJ,IAAAA,EAAE,EAAE,CAAL;AAAQE,IAAAA,IAAI,EAAE,gBAAd;AAAgCE,IAAAA,IAAI,EAAE;AAAtC,GAFG;AAFU,CAArB;;AAQA,SAASI,KAAT,CAAeC,KAAK,GAACF,YAArB,EAAmCG,MAAnC,EAA2C;AACvC,UAAQA,MAAM,CAACX,IAAf;AACI,SAAKN,YAAL;AACI,aAAO,EAAC,GAAGgB,KAAJ;AAAWX,QAAAA,KAAK,EAAEY,MAAM,CAACZ;AAAzB,OAAP;;AACJ,SAAKJ,MAAL;AACI,aAAO,EAAC,GAAGe,KAAJ;AAAWD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYG,MAAZ,CAAmBD,MAAM,CAACP,IAA1B;AAAlB,OAAP;;AACJ,SAAKR,MAAL;AACI,aAAO,EAAC,GAAGc,KAAJ;AAAWD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYI,GAAZ,CAAgBT,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYU,MAAM,CAACV,EAAnB,GAAuB,EAAC,GAAGG,IAAJ;AAAUC,UAAAA,IAAI,EAAE,CAACD,IAAI,CAACC;AAAtB,SAAvB,GAAqDD,IAA7E;AAAlB,OAAP;;AACJ,SAAKP,MAAL;AACI,aAAO,EAAC,GAAGa,KAAJ;AAAWD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,MAAZ,CAAmBV,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYU,MAAM,CAACV,EAA9C;AAAlB,OAAP;;AACJ;AACI,aAAOS,KAAP;AAVR;AAYH;;AAED,eAAeD,KAAf","sourcesContent":["const CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/toggle';\nconst REMOVE = 'todos/REMOVE';\n\nexport const changeInput = input => ({type: CHANGE_INPUT, input});\n\nlet id = 3;\nexport const insert = text => ({type: INSERT, todo: {id: id++, text, done: false}});\n\nexport const toggle = id => ({type: TOGGLE, id});\nexport const remove = id => ({type: REMOVE, id});\n\nconst initialState = {\n    input: '',\n    todos: [\n        {id: 1, text: '리덕스 기초 배우기', done: true},\n        {id: 2, text: '리액트오ㅘ 리덕스 사용하기', done: false}\n    ]\n}\n\nfunction todos(state=initialState, action) {\n    switch (action.type) {\n        case CHANGE_INPUT:\n            return {...state, input: action.input}\n        case INSERT:\n            return {...state, todos: state.todos.concat(action.todo)}\n        case TOGGLE:\n            return {...state, todos: state.todos.map(todo => todo.id === action.id? {...todo, done: !todo.done} : todo)}\n        case REMOVE:\n            return {...state, todos: state.todos.filter(todo => todo.id !== action.id)}\n        default:\n            return state;\n    }\n}\n\nexport default todos;"]},"metadata":{},"sourceType":"module"}