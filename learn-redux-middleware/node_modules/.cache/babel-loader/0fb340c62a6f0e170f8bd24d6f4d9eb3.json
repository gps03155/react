{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as api from '../lib/api';\nimport { startLoading, finishLoading } from './loading';\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\nexport const getPost = createAction(GET_POST, id => id);\nexport const getUsers = createAction(GET_USERS);\n\nfunction* getPostSaga(action) {\n  yield put(startLoading(GET_POST));\n\n  try {\n    const post = yield call(api.getPost, action.payload);\n    yield put({\n      type: GET_POST_SUCCESS,\n      payload: post.data\n    });\n  } catch (e) {\n    yield put({\n      type: GET_POST_FAILURE,\n      paylaod: e,\n      error: true\n    });\n  }\n\n  yield put(finishLoading(GET_POST));\n}\n\nfunction* getUsersSaga() {\n  yield put(startLoading(GET_USERS));\n\n  try {\n    const users = yield call(api.getUsers);\n    yield put({\n      type: GET_USERS_SUCCESS,\n      payload: users.data\n    });\n  } catch (e) {\n    yield put({\n      type: GET_USERS_FAILURE,\n      payload: e,\n      error: true\n    });\n  }\n\n  yield put(finishLoading(GET_USERS));\n}\n\nexport function* sampleSaga() {\n  yield takeLatest(GET_POST, getPostSaga);\n  yield takeLatest(GET_USERS, getUsersSaga);\n}\nconst initialState = {\n  post: null,\n  users: null\n};\nconst sample = handleActions({\n  [GET_POST_SUCCESS]: (state, action) => ({ ...state,\n    post: action.payload\n  }),\n  [GET_USERS_SUCCESS]: (state, action) => ({ ...state,\n    users: action.payload\n  })\n}, initialState);\nexport default sample;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/sample.js"],"names":["createAction","handleActions","call","put","takeLatest","api","startLoading","finishLoading","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_USERS","GET_USERS_SUCCESS","GET_USERS_FAILURE","getPost","id","getUsers","getPostSaga","action","post","payload","type","data","e","paylaod","error","getUsersSaga","users","sampleSaga","initialState","sample","state"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,WAA1C;AAEA,MAAMC,QAAQ,GAAG,iBAAjB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AAEA,MAAMC,SAAS,GAAG,kBAAlB;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AAEA,OAAO,MAAMC,OAAO,GAAGd,YAAY,CAACQ,QAAD,EAAWO,EAAE,IAAIA,EAAjB,CAA5B;AACP,OAAO,MAAMC,QAAQ,GAAGhB,YAAY,CAACW,SAAD,CAA7B;;AAEP,UAAUM,WAAV,CAAsBC,MAAtB,EAA6B;AACzB,QAAMf,GAAG,CAACG,YAAY,CAACE,QAAD,CAAb,CAAT;;AAEA,MAAG;AACC,UAAMW,IAAI,GAAG,MAAMjB,IAAI,CAACG,GAAG,CAACS,OAAL,EAAcI,MAAM,CAACE,OAArB,CAAvB;AACA,UAAMjB,GAAG,CAAC;AAACkB,MAAAA,IAAI,EAAEZ,gBAAP;AAAyBW,MAAAA,OAAO,EAAED,IAAI,CAACG;AAAvC,KAAD,CAAT;AACH,GAHD,CAIA,OAAMC,CAAN,EAAQ;AACJ,UAAMpB,GAAG,CAAC;AAACkB,MAAAA,IAAI,EAAEX,gBAAP;AAAyBc,MAAAA,OAAO,EAAED,CAAlC;AAAqCE,MAAAA,KAAK,EAAE;AAA5C,KAAD,CAAT;AACH;;AAED,QAAMtB,GAAG,CAACI,aAAa,CAACC,QAAD,CAAd,CAAT;AACH;;AAED,UAAUkB,YAAV,GAAwB;AACpB,QAAMvB,GAAG,CAACG,YAAY,CAACK,SAAD,CAAb,CAAT;;AAEA,MAAG;AACC,UAAMgB,KAAK,GAAG,MAAMzB,IAAI,CAACG,GAAG,CAACW,QAAL,CAAxB;AACA,UAAMb,GAAG,CAAC;AAACkB,MAAAA,IAAI,EAAET,iBAAP;AAA0BQ,MAAAA,OAAO,EAAEO,KAAK,CAACL;AAAzC,KAAD,CAAT;AACH,GAHD,CAIA,OAAMC,CAAN,EAAQ;AACJ,UAAMpB,GAAG,CAAC;AAACkB,MAAAA,IAAI,EAAER,iBAAP;AAA0BO,MAAAA,OAAO,EAAEG,CAAnC;AAAsCE,MAAAA,KAAK,EAAE;AAA7C,KAAD,CAAT;AACH;;AAED,QAAMtB,GAAG,CAACI,aAAa,CAACI,SAAD,CAAd,CAAT;AACH;;AAED,OAAO,UAAUiB,UAAV,GAAsB;AACzB,QAAMxB,UAAU,CAACI,QAAD,EAAWS,WAAX,CAAhB;AACA,QAAMb,UAAU,CAACO,SAAD,EAAYe,YAAZ,CAAhB;AACH;AAED,MAAMG,YAAY,GAAG;AACjBV,EAAAA,IAAI,EAAE,IADW;AAEjBQ,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,MAAMG,MAAM,GAAG7B,aAAa,CAAC;AACzB,GAACQ,gBAAD,GAAoB,CAACsB,KAAD,EAAQb,MAAR,MAAoB,EACpC,GAAGa,KADiC;AAC1BZ,IAAAA,IAAI,EAAED,MAAM,CAACE;AADa,GAApB,CADK;AAIzB,GAACR,iBAAD,GAAqB,CAACmB,KAAD,EAAQb,MAAR,MAAoB,EACrC,GAAGa,KADkC;AAC3BJ,IAAAA,KAAK,EAAET,MAAM,CAACE;AADa,GAApB;AAJI,CAAD,EAOzBS,YAPyB,CAA5B;AASA,eAAeC,MAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport {call, put, takeLatest} from 'redux-saga/effects';\nimport * as api from '../lib/api';\nimport {startLoading, finishLoading} from './loading';\n\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\nexport const getPost = createAction(GET_POST, id => id);\nexport const getUsers = createAction(GET_USERS);\n\nfunction* getPostSaga(action){\n    yield put(startLoading(GET_POST));\n\n    try{\n        const post = yield call(api.getPost, action.payload);\n        yield put({type: GET_POST_SUCCESS, payload: post.data});\n    }\n    catch(e){\n        yield put({type: GET_POST_FAILURE, paylaod: e, error: true});\n    }\n\n    yield put(finishLoading(GET_POST));\n}\n\nfunction* getUsersSaga(){\n    yield put(startLoading(GET_USERS));\n\n    try{\n        const users = yield call(api.getUsers);\n        yield put({type: GET_USERS_SUCCESS, payload: users.data});\n    }\n    catch(e){\n        yield put({type: GET_USERS_FAILURE, payload: e, error: true});\n    }\n\n    yield put(finishLoading(GET_USERS));\n}\n\nexport function* sampleSaga(){\n    yield takeLatest(GET_POST, getPostSaga);\n    yield takeLatest(GET_USERS, getUsersSaga);\n}\n\nconst initialState = {\n    post: null,\n    users: null\n}\n\nconst sample = handleActions({\n    [GET_POST_SUCCESS]: (state, action) => ({\n        ...state, post: action.payload\n    }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n        ...state, users: action.payload\n    }),\n}, initialState)\n\nexport default sample;"]},"metadata":{},"sourceType":"module"}