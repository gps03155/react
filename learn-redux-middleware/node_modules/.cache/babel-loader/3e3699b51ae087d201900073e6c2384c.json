{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { delay, put, takeEvery, takeLatest } from 'redux-saga/effects';\nconst INCREASE = 'counter/INCREASE';\nconst DECREASE = 'counter/DECREASE';\nconst INCREASE_ASYNC = 'counter/INCREASE_ASYNC';\nconst DECREASE_ASYNC = 'counter/DECREASE_ASYNC';\nexport const increase = createAction(INCREASE);\nexport const decrease = createAction(DECREASE);\nexport const increaseAsync = createAction(INCREASE_ASYNC, () => undefined);\nexport const decreaseAsync = createAction(DECREASE_ASYNC, () => undefined);\n\nfunction* increaseSaga() {\n  yield delay(1000);\n  yield put(increase());\n}\n\nfunction* decreaseSaga() {\n  yield delay(1000);\n  yield put(decrease());\n}\n\nexport function* counterSaga() {\n  yield takeEvery(INCREASE_ASYNC, increaseSaga);\n  yield takeLatest(DECREASE_ASYNC, decreaseSaga);\n}\nconst initialState = 0;\nconst counter2 = handleActions({\n  [INCREASE]: state => state + 1,\n  [DECREASE]: state => state - 1\n}, initialState);\nexport default counter2;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/counter2.js"],"names":["createAction","handleActions","delay","put","takeEvery","takeLatest","INCREASE","DECREASE","INCREASE_ASYNC","DECREASE_ASYNC","increase","decrease","increaseAsync","undefined","decreaseAsync","increaseSaga","decreaseSaga","counterSaga","initialState","counter2","state"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,KAAR,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAgD,oBAAhD;AAGA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,cAAc,GAAG,wBAAvB;AACA,MAAMC,cAAc,GAAG,wBAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAGV,YAAY,CAACM,QAAD,CAA7B;AACP,OAAO,MAAMK,QAAQ,GAAGX,YAAY,CAACO,QAAD,CAA7B;AAEP,OAAO,MAAMK,aAAa,GAAGZ,YAAY,CAACQ,cAAD,EAAiB,MAAMK,SAAvB,CAAlC;AACP,OAAO,MAAMC,aAAa,GAAGd,YAAY,CAACS,cAAD,EAAiB,MAAMI,SAAvB,CAAlC;;AAEP,UAAUE,YAAV,GAAwB;AACpB,QAAMb,KAAK,CAAC,IAAD,CAAX;AACA,QAAMC,GAAG,CAACO,QAAQ,EAAT,CAAT;AACH;;AAED,UAAUM,YAAV,GAAwB;AACpB,QAAMd,KAAK,CAAC,IAAD,CAAX;AACA,QAAMC,GAAG,CAACQ,QAAQ,EAAT,CAAT;AACH;;AAED,OAAO,UAAUM,WAAV,GAAuB;AAC1B,QAAMb,SAAS,CAACI,cAAD,EAAiBO,YAAjB,CAAf;AACA,QAAMV,UAAU,CAACI,cAAD,EAAiBO,YAAjB,CAAhB;AACH;AAED,MAAME,YAAY,GAAG,CAArB;AAEA,MAAMC,QAAQ,GAAGlB,aAAa,CAAC;AAC3B,GAACK,QAAD,GAAYc,KAAK,IAAIA,KAAK,GAAG,CADF;AAE3B,GAACb,QAAD,GAAYa,KAAK,IAAIA,KAAK,GAAG;AAFF,CAAD,EAG3BF,YAH2B,CAA9B;AAKA,eAAeC,QAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport {delay, put, takeEvery, takeLatest} from 'redux-saga/effects';\n\n\nconst INCREASE = 'counter/INCREASE';\nconst DECREASE = 'counter/DECREASE';\nconst INCREASE_ASYNC = 'counter/INCREASE_ASYNC';\nconst DECREASE_ASYNC = 'counter/DECREASE_ASYNC';\n\nexport const increase = createAction(INCREASE);\nexport const decrease = createAction(DECREASE);\n\nexport const increaseAsync = createAction(INCREASE_ASYNC, () => undefined);\nexport const decreaseAsync = createAction(DECREASE_ASYNC, () => undefined);\n\nfunction* increaseSaga(){\n    yield delay(1000);\n    yield put(increase());\n}\n\nfunction* decreaseSaga(){\n    yield delay(1000);\n    yield put(decrease());\n}\n\nexport function* counterSaga(){\n    yield takeEvery(INCREASE_ASYNC, increaseSaga);\n    yield takeLatest(DECREASE_ASYNC, decreaseSaga);\n}\n\nconst initialState = 0;\n\nconst counter2 = handleActions({\n    [INCREASE]: state => state + 1,\n    [DECREASE]: state => state - 1\n}, initialState)\n\nexport default counter2"]},"metadata":{},"sourceType":"module"}