{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as api from '../lib/api';\nimport { startLoading, finishLoading } from './loading';\nimport createRequestSaga from '../lib/createRequestSaga';\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\nexport const getPost = createAction(GET_POST, id => id);\nexport const getUsers = createAction(GET_USERS); // function* getPostSaga(action){\n//     yield put(startLoading(GET_POST));\n//\n//     try{\n//         const post = yield call(api.getPost, action.payload);\n//         yield put({type: GET_POST_SUCCESS, payload: post.data});\n//     }\n//     catch(e){\n//         yield put({type: GET_POST_FAILURE, paylaod: e, error: true});\n//     }\n//\n//     yield put(finishLoading(GET_POST));\n// }\n// function* getUsersSaga(){\n//     yield put(startLoading(GET_USERS));\n//\n//     try{\n//         const users = yield call(api.getUsers);\n//         yield put({type: GET_USERS_SUCCESS, payload: users.data});\n//     }\n//     catch(e){\n//         yield put({type: GET_USERS_FAILURE, payload: e, error: true});\n//     }\n//\n//     yield put(finishLoading(GET_USERS));\n// }\n\nconst getPostSaga = createRequestSaga(GET_POST, api.getPost);\nconst getUsersSaga = createRequestSaga(GET_USERS, api.getUsers);\nexport function* sampleSaga() {\n  yield takeLatest(GET_POST, getPostSaga);\n  yield takeLatest(GET_USERS, getUsersSaga);\n}\nconst initialState = {\n  post: null,\n  users: null\n};\nconst sample = handleActions({\n  [GET_POST_SUCCESS]: (state, action) => ({ ...state,\n    post: action.payload\n  }),\n  [GET_USERS_SUCCESS]: (state, action) => ({ ...state,\n    users: action.payload\n  })\n}, initialState);\nexport default sample;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/sample.js"],"names":["createAction","handleActions","call","put","takeLatest","api","startLoading","finishLoading","createRequestSaga","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_USERS","GET_USERS_SUCCESS","GET_USERS_FAILURE","getPost","id","getUsers","getPostSaga","getUsersSaga","sampleSaga","initialState","post","users","sample","state","action","payload"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,WAA1C;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,MAAMC,QAAQ,GAAG,iBAAjB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AAEA,MAAMC,SAAS,GAAG,kBAAlB;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AAEA,OAAO,MAAMC,OAAO,GAAGf,YAAY,CAACS,QAAD,EAAWO,EAAE,IAAIA,EAAjB,CAA5B;AACP,OAAO,MAAMC,QAAQ,GAAGjB,YAAY,CAACY,SAAD,CAA7B,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMM,WAAW,GAAGV,iBAAiB,CAACC,QAAD,EAAWJ,GAAG,CAACU,OAAf,CAArC;AACA,MAAMI,YAAY,GAAGX,iBAAiB,CAACI,SAAD,EAAYP,GAAG,CAACY,QAAhB,CAAtC;AAEA,OAAO,UAAUG,UAAV,GAAsB;AACzB,QAAMhB,UAAU,CAACK,QAAD,EAAWS,WAAX,CAAhB;AACA,QAAMd,UAAU,CAACQ,SAAD,EAAYO,YAAZ,CAAhB;AACH;AAED,MAAME,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,MAAMC,MAAM,GAAGvB,aAAa,CAAC;AACzB,GAACS,gBAAD,GAAoB,CAACe,KAAD,EAAQC,MAAR,MAAoB,EACpC,GAAGD,KADiC;AAC1BH,IAAAA,IAAI,EAAEI,MAAM,CAACC;AADa,GAApB,CADK;AAIzB,GAACd,iBAAD,GAAqB,CAACY,KAAD,EAAQC,MAAR,MAAoB,EACrC,GAAGD,KADkC;AAC3BF,IAAAA,KAAK,EAAEG,MAAM,CAACC;AADa,GAApB;AAJI,CAAD,EAOzBN,YAPyB,CAA5B;AASA,eAAeG,MAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport {call, put, takeLatest} from 'redux-saga/effects';\nimport * as api from '../lib/api';\nimport {startLoading, finishLoading} from './loading';\nimport createRequestSaga from '../lib/createRequestSaga';\n\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\nexport const getPost = createAction(GET_POST, id => id);\nexport const getUsers = createAction(GET_USERS);\n\n// function* getPostSaga(action){\n//     yield put(startLoading(GET_POST));\n//\n//     try{\n//         const post = yield call(api.getPost, action.payload);\n//         yield put({type: GET_POST_SUCCESS, payload: post.data});\n//     }\n//     catch(e){\n//         yield put({type: GET_POST_FAILURE, paylaod: e, error: true});\n//     }\n//\n//     yield put(finishLoading(GET_POST));\n// }\n\n// function* getUsersSaga(){\n//     yield put(startLoading(GET_USERS));\n//\n//     try{\n//         const users = yield call(api.getUsers);\n//         yield put({type: GET_USERS_SUCCESS, payload: users.data});\n//     }\n//     catch(e){\n//         yield put({type: GET_USERS_FAILURE, payload: e, error: true});\n//     }\n//\n//     yield put(finishLoading(GET_USERS));\n// }\n\nconst getPostSaga = createRequestSaga(GET_POST, api.getPost);\nconst getUsersSaga = createRequestSaga(GET_USERS, api.getUsers);\n\nexport function* sampleSaga(){\n    yield takeLatest(GET_POST, getPostSaga);\n    yield takeLatest(GET_USERS, getUsersSaga);\n}\n\nconst initialState = {\n    post: null,\n    users: null\n}\n\nconst sample = handleActions({\n    [GET_POST_SUCCESS]: (state, action) => ({\n        ...state, post: action.payload\n    }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n        ...state, users: action.payload\n    }),\n}, initialState)\n\nexport default sample;"]},"metadata":{},"sourceType":"module"}