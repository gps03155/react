{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport * as api from '../lib/api';\nimport createRequestThunk from '../lib/createRequestThunk';\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE'; // export const getPost = id => async dispatch => {\n//     dispatch({type: GET_POST});\n//\n//     try{\n//         const response = await api.getPost(id);\n//         dispatch({type: GET_POST_SUCCESS, payload: response.data})\n//     }\n//     catch(e){\n//         dispatch({type: GET_POST_FAILURE, payload: e, error: true});\n//         throw e;\n//     }\n// }\n// export const getUsers = () => async dispatch => {\n//     dispatch({type: GET_USERS});\n//\n//     try{\n//         const response = await api.getUsers();\n//         dispatch({type: GET_USERS_SUCCESS, payload: response.data});\n//     }\n//     catch(e){\n//         dispatch({type: GET_USERS_FAILURE, payload: e, error: true})\n//     }\n// }\n\nexport const getPost = createRequestThunk(GET_POST, api.getPost);\nexport const getUsers = createRequestThunk(GET_USERS, api.getUsers);\nconst initialState = {\n  loading: {\n    GET_POST: false,\n    GET_USERS: false\n  },\n  post: null,\n  users: null\n};\nconst sample = handleActions({\n  [GET_POST]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: true\n    }\n  }),\n  [GET_POST_SUCCESS]: (state, action) => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: false\n    },\n    post: action.payload\n  }),\n  [GET_POST_FAILURE]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: false\n    }\n  }),\n  [GET_USERS]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: true\n    }\n  }),\n  [GET_USERS_SUCCESS]: (state, action) => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: false\n    },\n    users: action.payload\n  }),\n  [GET_USERS_FAILURE]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: false\n    }\n  })\n}, initialState);\nexport default sample;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/sample.js"],"names":["handleActions","api","createRequestThunk","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_USERS","GET_USERS_SUCCESS","GET_USERS_FAILURE","getPost","getUsers","initialState","loading","post","users","sample","state","action","payload"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,eAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,QAAQ,GAAG,iBAAjB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB;AAEA,MAAMC,SAAS,GAAG,kBAAlB;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AACA,MAAMC,iBAAiB,GAAG,0BAA1B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAGP,kBAAkB,CAACC,QAAD,EAAWF,GAAG,CAACQ,OAAf,CAAlC;AACP,OAAO,MAAMC,QAAQ,GAAGR,kBAAkB,CAACI,SAAD,EAAYL,GAAG,CAACS,QAAhB,CAAnC;AAEP,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AACLT,IAAAA,QAAQ,EAAE,KADL;AAELG,IAAAA,SAAS,EAAE;AAFN,GADQ;AAKjBO,EAAAA,IAAI,EAAE,IALW;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB;AASA,MAAMC,MAAM,GAAGf,aAAa,CAAC;AACzB,GAACG,QAAD,GAAYa,KAAK,KAAK,EAClB,GAAGA,KADe;AACRJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBT,MAAAA,QAAQ,EAAE;AAA7B;AADD,GAAL,CADQ;AAIzB,GAACC,gBAAD,GAAoB,CAACY,KAAD,EAAQC,MAAR,MAAoB,EACpC,GAAGD,KADiC;AAC1BJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBT,MAAAA,QAAQ,EAAE;AAA7B,KADiB;AACoBU,IAAAA,IAAI,EAAEI,MAAM,CAACC;AADjC,GAApB,CAJK;AAOzB,GAACb,gBAAD,GAAoBW,KAAK,KAAK,EAC1B,GAAGA,KADuB;AAChBJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBT,MAAAA,QAAQ,EAAE;AAA7B;AADO,GAAL,CAPA;AAUzB,GAACG,SAAD,GAAaU,KAAK,KAAK,EACnB,GAAGA,KADgB;AACTJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBN,MAAAA,SAAS,EAAE;AAA9B;AADA,GAAL,CAVO;AAazB,GAACC,iBAAD,GAAqB,CAACS,KAAD,EAAQC,MAAR,MAAoB,EACrC,GAAGD,KADkC;AAC3BJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBN,MAAAA,SAAS,EAAE;AAA9B,KADkB;AACoBQ,IAAAA,KAAK,EAAEG,MAAM,CAACC;AADlC,GAApB,CAbI;AAgBzB,GAACV,iBAAD,GAAqBQ,KAAK,KAAK,EAC3B,GAAGA,KADwB;AACjBJ,IAAAA,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;AAAmBN,MAAAA,SAAS,EAAE;AAA9B;AADQ,GAAL;AAhBD,CAAD,EAmBzBK,YAnByB,CAA5B;AAqBA,eAAeI,MAAf","sourcesContent":["import {handleActions} from 'redux-actions';\nimport * as api from '../lib/api';\nimport createRequestThunk from '../lib/createRequestThunk';\n\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\n\n// export const getPost = id => async dispatch => {\n//     dispatch({type: GET_POST});\n//\n//     try{\n//         const response = await api.getPost(id);\n//         dispatch({type: GET_POST_SUCCESS, payload: response.data})\n//     }\n//     catch(e){\n//         dispatch({type: GET_POST_FAILURE, payload: e, error: true});\n//         throw e;\n//     }\n// }\n\n// export const getUsers = () => async dispatch => {\n//     dispatch({type: GET_USERS});\n//\n//     try{\n//         const response = await api.getUsers();\n//         dispatch({type: GET_USERS_SUCCESS, payload: response.data});\n//     }\n//     catch(e){\n//         dispatch({type: GET_USERS_FAILURE, payload: e, error: true})\n//     }\n// }\n\nexport const getPost = createRequestThunk(GET_POST, api.getPost);\nexport const getUsers = createRequestThunk(GET_USERS, api.getUsers);\n\nconst initialState = {\n    loading: {\n        GET_POST: false,\n        GET_USERS: false\n    },\n    post: null,\n    users: null\n}\n\nconst sample = handleActions({\n    [GET_POST]: state => ({\n        ...state, loading: {...state.loading, GET_POST: true}\n    }),\n    [GET_POST_SUCCESS]: (state, action) => ({\n        ...state, loading: {...state.loading, GET_POST: false}, post: action.payload\n    }),\n    [GET_POST_FAILURE]: state => ({\n        ...state, loading: {...state.loading, GET_POST: false}\n    }),\n    [GET_USERS]: state => ({\n        ...state, loading: {...state.loading, GET_USERS: true}\n    }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n        ...state, loading: {...state.loading, GET_USERS: false}, users: action.payload\n    }),\n    [GET_USERS_FAILURE]: state => ({\n        ...state, loading: {...state.loading, GET_USERS: false}\n    })\n}, initialState)\n\nexport default sample;"]},"metadata":{},"sourceType":"module"}