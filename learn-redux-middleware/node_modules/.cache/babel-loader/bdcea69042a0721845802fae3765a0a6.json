{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport * as api from '../lib/api';\nimport createRequestThunk from '../lib/createRequestThunk';\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS'; // const GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS'; // const GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n// export const getPost = id => async dispatch => {\n//     dispatch({type: GET_POST});\n//\n//     try{\n//         const response = await api.getPost(id);\n//         dispatch({type: GET_POST_SUCCESS, payload: response.data})\n//     }\n//     catch(e){\n//         dispatch({type: GET_POST_FAILURE, payload: e, error: true});\n//         throw e;\n//     }\n// }\n// export const getUsers = () => async dispatch => {\n//     dispatch({type: GET_USERS});\n//\n//     try{\n//         const response = await api.getUsers();\n//         dispatch({type: GET_USERS_SUCCESS, payload: response.data});\n//     }\n//     catch(e){\n//         dispatch({type: GET_USERS_FAILURE, payload: e, error: true})\n//     }\n// }\n\nexport const getPost = createRequestThunk(GET_POST, api.getPost);\nexport const getUsers = createRequestThunk(GET_USERS, api.getUsers);\nconst initialState = {\n  // loading: {\n  //     GET_POST: false,\n  //     GET_USERS: false\n  // },\n  post: null,\n  users: null\n};\nconst sample = handleActions({\n  // [GET_POST]: state => ({\n  //     ...state, loading: {...state.loading, GET_POST: true}\n  // }),\n  [GET_POST_SUCCESS]: (state, action) => ({ ...state,\n    post: action.payload\n  }),\n  // [GET_POST_FAILURE]: state => ({\n  //     ...state, loading: {...state.loading, GET_POST: false}\n  // }),\n  // [GET_USERS]: state => ({\n  //     ...state, loading: {...state.loading, GET_USERS: true}\n  // }),\n  [GET_USERS_SUCCESS]: (state, action) => ({ ...state,\n    users: action.payload\n  }) // [GET_USERS_FAILURE]: state => ({\n  //     ...state, loading: {...state.loading, GET_USERS: false}\n  // })\n\n}, initialState);\nexport default sample;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/sample.js"],"names":["handleActions","api","createRequestThunk","GET_POST","GET_POST_SUCCESS","GET_USERS","GET_USERS_SUCCESS","getPost","getUsers","initialState","post","users","sample","state","action","payload"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,eAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,QAAQ,GAAG,iBAAjB;AACA,MAAMC,gBAAgB,GAAG,yBAAzB,C,CACA;;AAEA,MAAMC,SAAS,GAAG,kBAAlB;AACA,MAAMC,iBAAiB,GAAG,0BAA1B,C,CACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAGL,kBAAkB,CAACC,QAAD,EAAWF,GAAG,CAACM,OAAf,CAAlC;AACP,OAAO,MAAMC,QAAQ,GAAGN,kBAAkB,CAACG,SAAD,EAAYJ,GAAG,CAACO,QAAhB,CAAnC;AAEP,MAAMC,YAAY,GAAG;AACjB;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE,IALW;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB;AASA,MAAMC,MAAM,GAAGZ,aAAa,CAAC;AACzB;AACA;AACA;AACA,GAACI,gBAAD,GAAoB,CAACS,KAAD,EAAQC,MAAR,MAAoB,EACpC,GAAGD,KADiC;AAC1BH,IAAAA,IAAI,EAAEI,MAAM,CAACC;AADa,GAApB,CAJK;AAOzB;AACA;AACA;AACA;AACA;AACA;AACA,GAACT,iBAAD,GAAqB,CAACO,KAAD,EAAQC,MAAR,MAAoB,EACrC,GAAGD,KADkC;AAC3BF,IAAAA,KAAK,EAAEG,MAAM,CAACC;AADa,GAApB,CAbI,CAgBzB;AACA;AACA;;AAlByB,CAAD,EAmBzBN,YAnByB,CAA5B;AAqBA,eAAeG,MAAf","sourcesContent":["import {handleActions} from 'redux-actions';\nimport * as api from '../lib/api';\nimport createRequestThunk from '../lib/createRequestThunk';\n\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\n// const GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\n// const GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\n\n// export const getPost = id => async dispatch => {\n//     dispatch({type: GET_POST});\n//\n//     try{\n//         const response = await api.getPost(id);\n//         dispatch({type: GET_POST_SUCCESS, payload: response.data})\n//     }\n//     catch(e){\n//         dispatch({type: GET_POST_FAILURE, payload: e, error: true});\n//         throw e;\n//     }\n// }\n\n// export const getUsers = () => async dispatch => {\n//     dispatch({type: GET_USERS});\n//\n//     try{\n//         const response = await api.getUsers();\n//         dispatch({type: GET_USERS_SUCCESS, payload: response.data});\n//     }\n//     catch(e){\n//         dispatch({type: GET_USERS_FAILURE, payload: e, error: true})\n//     }\n// }\n\nexport const getPost = createRequestThunk(GET_POST, api.getPost);\nexport const getUsers = createRequestThunk(GET_USERS, api.getUsers);\n\nconst initialState = {\n    // loading: {\n    //     GET_POST: false,\n    //     GET_USERS: false\n    // },\n    post: null,\n    users: null\n}\n\nconst sample = handleActions({\n    // [GET_POST]: state => ({\n    //     ...state, loading: {...state.loading, GET_POST: true}\n    // }),\n    [GET_POST_SUCCESS]: (state, action) => ({\n        ...state, post: action.payload\n    }),\n    // [GET_POST_FAILURE]: state => ({\n    //     ...state, loading: {...state.loading, GET_POST: false}\n    // }),\n    // [GET_USERS]: state => ({\n    //     ...state, loading: {...state.loading, GET_USERS: true}\n    // }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n        ...state, users: action.payload\n    }),\n    // [GET_USERS_FAILURE]: state => ({\n    //     ...state, loading: {...state.loading, GET_USERS: false}\n    // })\n}, initialState)\n\nexport default sample;"]},"metadata":{},"sourceType":"module"}