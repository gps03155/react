{"ast":null,"code":"import loading, { finishLoading, startLoading } from '../modules/loading';\nexport default function createRequestThunk(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return params => async dispatch => {\n    dispatch({\n      type\n    });\n    dispatch(startLoading(type));\n\n    try {\n      const response = await request(params);\n      dispatch({\n        type: SUCCESS,\n        payload: response.data\n      });\n      dispatch(finishLoading(type));\n    } catch (e) {\n      dispatch({\n        type: FAILURE,\n        payload: e,\n        error: true\n      });\n      dispatch(startLoading(type));\n      throw e;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/lib/createRequestThunk.js"],"names":["loading","finishLoading","startLoading","createRequestThunk","type","request","SUCCESS","FAILURE","params","dispatch","response","payload","data","e","error"],"mappings":"AAAA,OAAOA,OAAP,IAAiBC,aAAjB,EAAgCC,YAAhC,QAAmD,oBAAnD;AAGA,eAAe,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;AACtD,QAAMC,OAAO,GAAI,GAAEF,IAAK,UAAxB;AACA,QAAMG,OAAO,GAAI,GAAEH,IAAK,UAAxB;AAEA,SAAOI,MAAM,IAAI,MAAMC,QAAN,IAAkB;AAC/BA,IAAAA,QAAQ,CAAC;AAACL,MAAAA;AAAD,KAAD,CAAR;AACAK,IAAAA,QAAQ,CAACP,YAAY,CAACE,IAAD,CAAb,CAAR;;AAEA,QAAG;AACC,YAAMM,QAAQ,GAAG,MAAML,OAAO,CAACG,MAAD,CAA9B;AACAC,MAAAA,QAAQ,CAAC;AAACL,QAAAA,IAAI,EAAEE,OAAP;AAAgBK,QAAAA,OAAO,EAAED,QAAQ,CAACE;AAAlC,OAAD,CAAR;AACAH,MAAAA,QAAQ,CAACR,aAAa,CAACG,IAAD,CAAd,CAAR;AACH,KAJD,CAKA,OAAMS,CAAN,EAAQ;AACJJ,MAAAA,QAAQ,CAAC;AAACL,QAAAA,IAAI,EAAEG,OAAP;AAAgBI,QAAAA,OAAO,EAAEE,CAAzB;AAA4BC,QAAAA,KAAK,EAAE;AAAnC,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAACP,YAAY,CAACE,IAAD,CAAb,CAAR;AACA,YAAMS,CAAN;AACH;AACJ,GAdD;AAeH","sourcesContent":["import loading, {finishLoading, startLoading} from '../modules/loading';\n\n\nexport default function createRequestThunk(type, request) {\n    const SUCCESS = `${type}_SUCCESS`;\n    const FAILURE = `${type}_FAILURE`;\n\n    return params => async dispatch => {\n        dispatch({type});\n        dispatch(startLoading(type));\n\n        try{\n            const response = await request(params);\n            dispatch({type: SUCCESS, payload: response.data});\n            dispatch(finishLoading(type));\n        }\n        catch(e){\n            dispatch({type: FAILURE, payload: e, error: true});\n            dispatch(startLoading(type));\n            throw e;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}