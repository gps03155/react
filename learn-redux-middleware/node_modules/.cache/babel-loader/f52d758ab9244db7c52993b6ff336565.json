{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport * as api from '../lib/api';\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\nexport const getPost = id => async dispatch => {\n  dispatch({\n    type: GET_POST\n  });\n\n  try {\n    const response = await api.getPost(id);\n    dispatch({\n      type: GET_POST_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_POST_FAILURE,\n      payload: e,\n      error: true\n    });\n    throw e;\n  }\n};\nexport const getUsers = () => async dispatch => {\n  dispatch({\n    type: GET_USERS\n  });\n\n  try {\n    const response = await api.getUsers();\n    dispatch({\n      type: GET_USERS_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_USERS_FAILURE,\n      payload: e,\n      error: true\n    });\n  }\n};\nconst initialState = {\n  loading: {\n    GET_POST: false,\n    GET_USERS: false\n  },\n  post: null,\n  users: null\n};\nconst sample = handleActions({\n  [GET_POST]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: true\n    }\n  }),\n  [GET_POST_SUCCESS]: (state, action) => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: false\n    },\n    post: action.payload\n  }),\n  [GET_POST_FAILURE]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_POST: false\n    }\n  }),\n  [GET_USERS]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: true\n    }\n  }),\n  [GET_USERS_SUCCESS]: (state, action) => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: false\n    },\n    users: action.payload\n  }),\n  [GET_USERS_FAILURE]: state => ({ ...state,\n    loading: { ...state.loading,\n      GET_USERS: false\n    }\n  })\n}, initialState);\nexport default sample;","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/modules/sample.js"],"names":["handleActions","api","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_USERS","GET_USERS_SUCCESS","GET_USERS_FAILURE","getPost","id","dispatch","type","response","payload","data","e","error","getUsers","initialState","loading","post","users","sample","state","action"],"mappings":"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","sourcesContent":["import {handleActions} from 'redux-actions';\nimport * as api from '../lib/api';\n\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\n\nexport const getPost = id => async dispatch => {\n    dispatch({type: GET_POST});\n\n    try{\n        const response = await api.getPost(id);\n        dispatch({type: GET_POST_SUCCESS, payload: response.data})\n    }\n    catch(e){\n        dispatch({type: GET_POST_FAILURE, payload: e, error: true});\n        throw e;\n    }\n}\n\nexport const getUsers = () => async dispatch => {\n    dispatch({type: GET_USERS});\n\n    try{\n        const response = await api.getUsers();\n        dispatch({type: GET_USERS_SUCCESS, payload: response.data});\n    }\n    catch(e){\n        dispatch({type: GET_USERS_FAILURE, payload: e, error: true})\n    }\n}\n\nconst initialState = {\n    loading: {\n        GET_POST: false,\n        GET_USERS: false\n    },\n    post: null,\n    users: null\n}\n\nconst sample = handleActions({\n    [GET_POST]: state => ({\n        ...state, loading: {...state.loading, GET_POST: true}\n    }),\n    [GET_POST_SUCCESS]: (state, action) => ({\n        ...state, loading: {...state.loading, GET_POST: false}, post: action.payload\n    }),\n    [GET_POST_FAILURE]: state => ({\n        ...state, loading: {...state.loading, GET_POST: false}\n    }),\n    [GET_USERS]: state => ({\n        ...state, loading: {...state.loading, GET_USERS: true}\n    }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n        ...state, loading: {...state.loading, GET_USERS: false}, users: action.payload\n    }),\n    [GET_USERS_FAILURE]: state => ({\n        ...state, loading: {...state.loading, GET_USERS: false}\n    })\n}, initialState)\n\nexport default sample;"]},"metadata":{},"sourceType":"module"}