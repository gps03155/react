{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from \"../modules/loading\";\nexport default function createRequestSaaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAUILURE = `${type}_FAILURE`;\n  return function* (action) {\n    yield put(startLoading(type));\n\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data\n      });\n    } catch (e) {\n      yield put({\n        type: FAUILURE,\n        payload: e,\n        error: true\n      });\n    }\n\n    yield put(finishLoading(type));\n  };\n}","map":{"version":3,"sources":["/Users/psh/PycharmProjects/learn-redux-middleware/src/lib/createRequestSaga.js"],"names":["call","put","startLoading","finishLoading","createRequestSaaga","type","request","SUCCESS","FAUILURE","action","response","payload","data","e","error"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,QAAwB,oBAAxB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,oBAA1C;AAGA,eAAe,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,OAAlC,EAA0C;AACrD,QAAMC,OAAO,GAAI,GAAEF,IAAK,UAAxB;AACA,QAAMG,QAAQ,GAAI,GAAEH,IAAK,UAAzB;AAEA,SAAO,WAAWI,MAAX,EAAkB;AACrB,UAAMR,GAAG,CAACC,YAAY,CAACG,IAAD,CAAb,CAAT;;AAEA,QAAG;AACC,YAAMK,QAAQ,GAAG,MAAMV,IAAI,CAACM,OAAD,EAAUG,MAAM,CAACE,OAAjB,CAA3B;AACA,YAAMV,GAAG,CAAC;AAACI,QAAAA,IAAI,EAAEE,OAAP;AAAgBI,QAAAA,OAAO,EAAED,QAAQ,CAACE;AAAlC,OAAD,CAAT;AACH,KAHD,CAIA,OAAMC,CAAN,EAAQ;AACJ,YAAMZ,GAAG,CAAC;AAACI,QAAAA,IAAI,EAAEG,QAAP;AAAiBG,QAAAA,OAAO,EAAEE,CAA1B;AAA6BC,QAAAA,KAAK,EAAE;AAApC,OAAD,CAAT;AACH;;AAED,UAAMb,GAAG,CAACE,aAAa,CAACE,IAAD,CAAd,CAAT;AACH,GAZD;AAaH","sourcesContent":["import {call, put} from 'redux-saga/effects';\nimport {startLoading, finishLoading} from \"../modules/loading\";\n\n\nexport default function createRequestSaaga(type, request){\n    const SUCCESS = `${type}_SUCCESS`;\n    const FAUILURE = `${type}_FAILURE`;\n\n    return function* (action){\n        yield put(startLoading(type));\n\n        try{\n            const response = yield call(request, action.payload);\n            yield put({type: SUCCESS, payload: response.data});\n        }\n        catch(e){\n            yield put({type: FAUILURE, payload: e, error: true});\n        }\n\n        yield put(finishLoading(type));\n    }\n}"]},"metadata":{},"sourceType":"module"}