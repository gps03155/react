{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","React","memo","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","item","key","createBulkTodos","array","i","push","App","setTodos","nextId","useRef","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAYgBA,G,MATK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,OCqBvBE,G,MAxBI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAGzBC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACnB,IAEGM,EAAWH,uBAAY,SAAAC,GACzBN,EAASE,GACTC,EAAS,IAETG,EAAEG,mBACH,CAACT,EAAUE,IAEd,OACI,0BAAMJ,UAAU,aAAaU,SAAUA,GAC/B,2BAAOE,YAAY,qDAAaR,MAAOA,EAAOE,SAAUA,IACxD,4BAAQO,KAAK,UACT,kBAAC,IAAD,U,wBCGLC,MAAMC,MAhBA,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC5BC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,QAEjB,OACI,yBAAKrB,UAAU,gBACX,yBAAKA,UAAWsB,IAAG,WAAY,CAACD,YAAWE,QAAS,kBAAML,EAASC,KAC9DE,EAAS,kBAAC,IAAD,MAAgB,kBAAC,IAAD,MAC1B,yBAAKrB,UAAU,QAAQoB,IAE3B,yBAAKpB,UAAU,SAASuB,QAAS,kBAAMN,EAASE,KAC5C,kBAAC,IAAD,WCLDK,G,MAVE,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOR,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAChC,OACI,yBAAKlB,UAAU,YACVyB,EAAMC,KAAI,SAAAC,GAAI,OACX,kBAAC,EAAD,CAAcX,KAAMW,EAAMC,IAAKD,EAAKR,GAAIF,SAAUA,EAAUC,SAAUA,UCHtF,SAASW,IAGL,IAFA,IAAMC,EAAQ,GAENC,EAAE,EAAEA,EAAE,KAAKA,IACfD,EAAME,KAAK,CACPb,GAAIY,EACJX,KAAK,gBAAD,OAAQW,GACZV,SAAS,IAIjB,OAAOS,EAqCIG,MAlCf,WAAgB,IAAD,EACe9B,mBAAS0B,GADxB,mBACJJ,EADI,KACGS,EADH,KAGLC,EAASC,iBAAO,MAEhBlC,EAAWK,uBAAY,SAAAa,GACzB,IAAMJ,EAAO,CACTG,GAAIgB,EAAOE,QACXjB,OACAC,SAAS,GAGba,GAAS,SAAAT,GAAK,OAAIA,EAAMa,OAAOtB,MAC/BmB,EAAOE,YACR,IAEGpB,EAAWV,uBAAY,SAAAY,GACzBe,GAAS,SAAAT,GAAK,OAAIA,EAAMc,QAAO,SAAAvB,GAAI,OAAIA,EAAKG,KAAOA,UACpD,IAEGD,EAAWX,uBAAY,SAAAY,GACzBe,GAAS,SAAAT,GAAK,OAAIA,EAAMC,KAAI,SAAAC,GAAI,OAC5BA,EAAKR,KAAOA,EAAZ,2BAAoBQ,GAApB,IAA0BN,SAAUM,EAAKN,UAAWM,UAEzD,IAEH,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAYzB,SAAUA,IACtB,kBAAC,EAAD,CAAUuB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,MCpC9CsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ca35c7c.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/TodoTemplate.css';\n\nconst TodoTemplate = ({children}) => {\n    return(\n        <div className=\"TodoTemplate\">\n            <div className=\"app-title\">일정 관리</div>\n            <div className=\"content\">{children}</div>\n        </div>\n    )\n}\n\nexport default  TodoTemplate;","import React, {useState, useCallback} from 'react';\nimport {MdAdd} from 'react-icons/md';\nimport '../css/TodoInsert.css';\n\nconst TodoInsert = ({onInsert}) => {\n    const [value, setValue] = useState('');\n\n    const onChange = useCallback(e => {\n        setValue(e.target.value);\n    }, []);\n\n    const onSubmit = useCallback(e => {\n        onInsert(value);\n        setValue('');\n\n        e.preventDefault();\n    }, [onInsert, value]);\n\n    return(\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\n                <input placeholder=\"할 일을 입력하세요\" value={value} onChange={onChange}/>\n                <button type=\"submit\">\n                    <MdAdd/>\n                </button>\n        </form>\n    );\n}\n\nexport default TodoInsert;","import React from 'react';\nimport '../css/TodoListItem.css';\nimport {\n    MdCheckBoxOutlineBlank,\n    MdCheckBox,\n    MdRemoveCircleOutline\n} from \"react-icons/md\";\nimport cn from 'classnames';\n\nconst TodoListItem = ({todo, onRemove, onToggle}) => {\n    const {id, text, checked} = todo;\n\n    return (\n        <div className=\"TodoListItem\">\n            <div className={cn('checkbox', {checked})} onClick={() => onToggle(id)}>\n                {checked? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}\n                <div className=\"text\">{text}</div>\n            </div>\n            <div className=\"remove\" onClick={() => onRemove(id)}>\n                <MdRemoveCircleOutline/>\n            </div>\n        </div>\n    );\n}\n\nexport default React.memo(TodoListItem);","import React from 'react';\nimport TodoListItem from './TodoListItem';\nimport '../css/TodoList.css'\n\nconst TodoList = ({todos, onRemove, onToggle}) => {\n    return(\n        <div className=\"TodoList\">\n            {todos.map(item => (\n                <TodoListItem todo={item} key={item.id} onRemove={onRemove} onToggle={onToggle}/>\n            ))}\n        </div>\n    );\n}\n\nexport default TodoList;","import React, {useState, useCallback, useRef} from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos(){\n    const array = [];\n\n    for(let i=0;i<2500;i++){\n        array.push({\n            id: i,\n            text: `할일 ${i}`,\n            checked: false\n        })\n    }\n\n    return array;\n}\n\nfunction App() {\n    const [todos, setTodos] = useState(createBulkTodos);\n\n    const nextId = useRef(2501);\n\n    const onInsert = useCallback(text => {\n        const todo = {\n            id: nextId.current,\n            text,\n            checked: false\n        }\n\n        setTodos(todos => todos.concat(todo));\n        nextId.current++;\n    }, []);\n\n    const onRemove = useCallback(id => {\n        setTodos(todos => todos.filter(todo => todo.id !== id));\n    }, []);\n\n    const onToggle = useCallback(id => {\n        setTodos(todos => todos.map(item =>\n            item.id === id? {...item, checked: !item.checked} : item\n        ));\n    }, [])\n\n    return (\n        <TodoTemplate>\n            <TodoInsert onInsert={onInsert}/>\n            <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n        </TodoTemplate>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}